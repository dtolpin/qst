= Synd 2, так сказать =

Нынешний язык CNC (что обозначают эти три буквы?) простой, но странный. 
Его основу - метки переменных, границы и вывод - удобно писать и читать.
Синдромные блоки читать менее удобно, потому что для скобочек - 
испецифические правила:

 так - можно:
 
X 
{ 1 1 A
 3 5 B }
 
 а так - нельзя:
 
X {
  1 1 A
  3 5 B
}

Во всяком случае, по описанию. (На самом деле, я в своей программе 
разрешил писать по-всякому, потому что в CNC, в отличие от QST, переводы 
строки не влияют на синтаксис, их можно считать пробелами). 

К тому же, в синдромах имя переменной играет наоборот: 
при выводе ее значение проверяется по границам, а в блоке - наоборот, 
проверяется по тому, что справа, а в метку блока накапливается сумма 
сработавших симптомов. Но с этим можно жить.

С чем, на мой взгляд, ужиться трудно, это с ассемблерными вставками:
jump,back,add,sub,div,mul. Команды эти имеют уровень абстракции языка
ассемблера какого-нибудь процессора, из тех, что ставят в телефоны. Я
допускаю, что врача этому можно обучить, но не уверен, что нужно: вместо
этих конструкций, на мой взгляд, нужно ввести простые возможности более
высокого уровня, а от ассемблера отказаться.

Я хочу отказаться от ассемблера еще и потому, что собираюсь привлечь
к написанию генераторов программистов - не потому, что они программисты,
а потому, что эксперты - они знают, какие вопросы им задают в службе
поддержки, и как на них правильно отвечать. Программисты же, в отличие
от врачей, твердо знают, где ассемблеру место, где не место.

Некоторые вещи в CNC обусловлены удобством правки той единственной 
программы, которая до некоторого времени этот язык разбирала. Эти части
я тоже собираюсь переделать.

== Границы ==

В CNC границы для вывода - необязательные, для симптомов в синдромах
 - обязательные. Две звездочки, как я выяснил экспериментально,
 обозначают неотвеченный вопрос. Задать одну границу, не задавая второй,
 нельзя, или нужно писать БОЛЬШОЕ ЧИСЛО (кое где я это видел, 
 кажется).
 
Предлагаю все это выпрямить и упростить. Если границ нет, что при
генерации, что в симптомах, то соответствующая команда срабатывает 
безусловно. Звездочка - плохой символ для пропуска, во всех известных
мне случаях она означает _любое значение_, а не никакого, и для никакого
знак вопроса - намного лучший кандидат.

С другой стороны, звездочка - хороший символ для того, чтобы сказать "этой
границы нет". "2 *" означало бы "не меньше двух". Если звездочка будет вызывать
путаницу, можно подчеркивание, или еще что-нибудь.

Получается вот такой синтаксис:

границы ::= обязательные-границы? .
обязательные-границы ::= граница граница? | '?' .
граница ::= число | '*'  .

Границ может вообще не быть.

Примеры:

 2 - ровно два
1 3 - от одного до трех
* 5 - меньше пяти
 ?  - (один знак вопроса, не два) - нет ответа.
 *  - любой ответ
если нет границ, то действие происходит всегда.

== Вывод текста ==

Там все нормально, кроме того, что нет способа вывести закрывающую скобку.
У себя я уже добавил правило, что \) - это скобка в тексте, можно его
реализовать официально. Все остальные правила вполне переживаемы, скобки
для текста выглядят несколько экзотично, но вполне последовательно.

Печать ::= границы '+'? '(' (текст без скобок | '\)')* ')' .

== Синдромные сети ==

Главное, что нужно - это убрать закрепленное разбиение на строки: если
у вас в языке есть скобки, автор должен иметь право ставить эти скобки, где
ему заблагорассудится.

X  { ? A 1 3 B C } обозначает, что в X срабатывает A, если нет ответа, B, если от 1 до 3, C, если есть какой-нибудь ответ. Конечно же, удобнее для чтения
 написать:
X {
  ?  A
 1 3 B
     C
}

но это - личное дело автора. В связи с синдромами я хочу обсудить
и арифметику тоже. Я в имеющихся примерах нашел только операцию
add, и используется она, когда нужно накапливать от каждого симптома
не по 1, а другие значения. Получается нечитаемо - мне было трудно
понять, что и как должно работать, даже в простых примерах.

На самом деле надо просто записать то, что автор хочет сделать - задать
неумолчательное значение для прибавления; предлагаю делать это после
двоеточия.

X {
  ? A: 10
  1 3 B
  	  C: D
}

Если есть ответ на C, то прибавляется значение D. Арифметика используется
именно для этого, и никто не заставляет этим пользоваться, когда не нужно.
 

Cиндром ::= имя '{' симптом* '}' .
симптом ::= границы имя [':' число | имя ] .

== Переходы ==

Переход back для организации циклов я в примерах не видел, и не очень
хорошо понимаю, зачем нужны циклы. Если Вы мне покажете примеры,
я попробую предложить конструкцию для их описания. То,что сейчас jump,
нужно, на мой взгляд, заменить условным исполнением блока:

A
1 10 {
Z
1 3 +(The brown fox jumps over a lazy dog.)

}
D
+(End of text)

Блок между фигурными скобками будет срабатывать, только если A находится
в диапазоне от 1 до 10. Блоки могут быть вложенными.

Блок ::= границы '{' (Синдром|Имя|Печать|Блок)* '}' .

Границы здесь - обязательные, иначе не отличить от синдрома,
но без границ блок низачем не нужен. 

Если очень нужно сохранить переходы, то вот для них синтаксис:

Переход ::= границы '->' ('-'|'+')? Имя .

То есть
A
1 10 -> B

перейдет на B вперед, если A в пределах 1 10.

-> -Y

перейдет на предыдущий Y. И все же, я бы считал, что пользоваться этим не нужно, а нужно создавать блочную структуру.

=== Останов ===

Один специальный случай перехода, который неудобно описывать вложенными блоками - остановка исполнения программы (Коллега! скажите хоть что-нибудь!). Я думаю, что эта
ситуация заслуживает отдельной легко читаемой конструкции. Точка - слишком мелкий знак
препинания, двоеточие уже используется, восклицательный знак подошел бы, на мой взгляд.

Останов ::= границы '!' .

Красный_Свет
1 !

Означает, что на красный свет нужно остановиться.

== Комментарии ==

Комментарии остаются такими, как были, хотя вертикальная черта для них -
экзотика, конечно. В-прочем, все здесь - экзотика.

== Грамматика ==

Чтобы подытожить, получается вот такая грамматика:

Сценарий ::= (Cиндром|Имя|Печать|Блок|Останов|Переход)* .

Печать ::= границы '+'? '(' (текст без скобок | '\)')* ')' .
Блок ::= обязательные-границы '{' Сценарий '}' .
Останов ::= границы '!' .
Переход ::= границы '->' ('-'|'+')? Имя .

Cиндром ::= имя '{' симптом* '}' .
Симптом ::= границы имя [':' ( число | имя ) ] .

Границы ::= обязательные-границы? .
Обязательные-границы ::= граница граница? | '?'  .
Граница ::= число | '*'  .

Комментарии - какие были, от вертикальной черты до конца строки. 

Язык этот намного проще будет читать, и чуть-чуть сложнее компилировать 
из-за вложенных блоков, но это - примерно на десять минут работы. При этом
старые программы в новые переводить необязательно, можно поддерживать
оба языка, надо будет чуть-чуть повозиться с байт-кодами, чтобы они были пригодны для обоих, но это несложно. 

+(Что есть у животного)
+()
+(У )
Животное
1 (дракона)
2 {
	(амебы ничего нет)
	! 
  }
3 (cфинкса)
    (есть)

Число_ноздрей (* ноздр) 1 ( я) 2 4 ( и) 5 * ( ей) (,)
Число_пальцев (* пальцев)
(.)+()

== Дополнительные возможности ==

Если считаете нужным, в границах и значениях можно добавить арифметические выражения - в квадратных скобках, на этот раз. Они здесь будут уместны, но я хочу понять, какие на этот счет есть примеры. Что-то вроде

Число_ноздрей
[Число_пальцев+1] * (ковырять во всех ноздрях сразу не получится)

Но насколько это реальный пример? Я бы, при этом, предпочел поменять квадратные скобки на круглые, а круглые - на кавычки. 

Число_ноздрей
(Число_пальцев+1) * "ковырять во всех ноздрях сразу не получится"

Но  на этом уже точно не настраиваю. Разницы принципиальной нет.

 

