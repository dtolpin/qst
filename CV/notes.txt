Как я отбираю людей на работу.

A. Я по интервью собираюсь решить, хочу ли я с ним встречаться.
     
1. Я прошу прислать резюме в определенном формате и на определенный адрес. Например, 
   Subject: lisp engineer
   Format: PDF или Plain text
   To: human-resources@davidashen.net

Я скорее всего не буду разговаривать с человеком, даже читать резюме не буду - но взгляну, видимо - если такие требования не выполнены.

2. Я читаю резюме. Резюме обычно состоит из нескольких разделов, это - устойчивые формальные правила, своего рода вопросник. Разделы такие:

   Описания навыков и интересов
   Цель (кем хочет работать)
   Репрезентативные проекты
   Места работы
   Образование
 
Когда я читаю резюме, я обращаю внимание на то, что 
  1) список однотипных навыков (языки программирования, операционные системы), в которых человек - профессионал - включает примерно три-четыре наименования, и мне эти наименования нравятся. Если специалист пишет 
  	
  	Операционные системы: MS Windows XP
  	Языки программирования: Delphi

мне это не нравится, мало навыков и они частные (кому-то это хорошо, мне - плохо). Другой плохой пример:

    Операционные системы: Unix, Microsoft 
    Языки программирования: C, C++, C--, Java, Python, Ruby, Pascal, Perl, Lisp, Fortran, PL/1
    

Плохо потому, что Unix - слишком общая категория. Скорее всего, видел один раз у приятеля линукс на Live CD. Microsoft - вообще не категория, Microsoft выпускал разновидность Юникса - XENIX, и много чего другого. С языками программирования - в стольких инструментах нельзя быть профессионалом. Это просто список всех языков, про которые слышал. Кроме того, я с трудом себе представляю специалиста одновременно в Perl и Python. Я бы сам эту пару вместе никогда в своем резюме не написал.

Хороший пример: 

   Операционные системы: BSD, SysVr3,r4: kernel hacking, IPC; Win32: gui programming
   Языки программирования: C++, С, Perl, OCaml

Правильная детализация в средах, правильный список по размеру и сочетанию в языках.

  2) список интересов - правила примерно те же: правильная детализация и правильный разброс: 
  
    Плохой пример:
       - системное программирование
       - графические интерфейсы
       - приложения для windows xp
       
 
 	Хороший пример:
 	   - сетевые протоколы
 	   - многопоточная обработка данных
 	   - драйверы устройств для Linux


  3) Проекты. Проекты - это обычно разработки, в которых соискатель играл заметную роль, и которые можно очертить временными рамками. Мне интересно узнать, что с разработками сейчас: оказались ли они успешными, дожили ли они до наших дней. Это, пожалуй, - главное. То есть, если человек пишет:
  
    Писал систему управления жизнью на Марсе

то я хочу посмотреть, как она сейчас управляет - через веб, или через отзывы счастливых марсиан в прессе. Мне нравятся люди, присутствие которых в проекте сопровождалось успехом его. Мне не нравятся люди, которые в список репрезентативных проектов включают провалившиеся: то есть, если человек пишет:

    Разрабатывал редактор программ для среды Vertigo
    
а эта среда Vertigo так и не попала на рынок, потому что компания разорилась, а программисты разбежались, то этот человек для меня - плохой. Он думает, что в программной разработке есть какой-то другой показатель качества, кроме коллективного успеха конечного результата. Нет. Он мог это разрабатывать, но не должен указывать это среди своих достижений.

Кроме того, я стараюсь увидеть связь между списком интересов и репрезентативными проектами.

  4) История трудоустройств. Существует стандартное правило - в каждом описании трудоустройства человек должен описать свои обязанности и достижения. Хорошо, когда это правило соблюдается, а также все остальные правила написания резюме. Но, кроме того, и, часто, важнее, чтобы там были (и не были) определенные виды трудоустройств.
  
- Плохо, если работал программистом в банке больше трех месяцев, где-то. У такого подавлены инициатива и изобретательность. Работа в банке для программиста - последняя, до пенсии. Исключения составляют случаи контрактной автоматизации банка, но тогда программист работает не в банке, а в фирме, которая этот банк автоматизирует.

- Плохо, если работал программистом в крупном цехе: Luxoft, IBS и прочее. Там люди работают на потоке, это - такая армия для программистов. Человек от этого не портится, в отличие от работы в банке. Он должен быть заранее пригоден для того, чтобы работать в клети с 8 до 6. 

- Меня не очень волнует количество предыдущих работ. 

- Хорошо, если хотя бы часть репрезентативных проектов совпадает с местами работы.

- Хорошо, если хотя бы часть мест работы соискатель сменил до того, как эти места работы "умерли". 

- Хорошо, если есть места работы, в которые человек пришел к открытию этого места.

- Хорошо, если есть места работы, в которые человек пришел тогда, когда оно уже существовало давно, и либо улучшил дела, либо влился в успешный коллектив и занял заметное место.

- У меня было несколько плохих опытов с подрабатывающими программированием институтскими преподавателями. (Это не то же самое, что преподающий в институте инженер).

 5) Образование:
   - я настороженно отношусь к профессиональному программисткому образованию. Оно обычно плохое.
   - я настороженно отношусь к людям, которые учились долго - вуз, аспирантура, докторантура по обмену - и при это не работали до окончания образования. 
   - я спокойно отношусь к незавершенному высшему образованию, если человек проучился хотя бы четыре (ну три) года. Особенно, если он бросил учиться в начале 90-х. Тогда все бросали, потому что хотели есть.
   - мне нравится, если человек с каким-нибудь стажем, тем не менее, указывает тему своей дипломной работы.
   
Если у меня в целом складывается положительное впечатление, то я зову человека на разговор, и  это - тема отдельной беседы.

  	
   